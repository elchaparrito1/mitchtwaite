{"ast":null,"code":"var _jsxFileName = \"/Users/mitchellwaite/Personal-Website/mitchtwaite/Portafolio/client/src/pages/Support/Support.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Chatkit from \"@pusher/chatkit-client\";\nimport LoginModal from \"../../components/Modals/LoginModal\";\nimport API from \"../../utils/API\";\nimport \"./Support.css\";\n\nclass Support extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: null,\n      currentRoom: null,\n      newMessage: \"\",\n      messages: [],\n      rooms: [],\n      password: \"\",\n      isOpen: true,\n      login: \"\"\n    };\n\n    this.handleModal = () => {\n      if (!this.state.isOpen) {\n        this.setState({\n          isOpen: true\n        });\n      } else if (this.state.isOpen) {\n        this.setState({\n          isOpen: false\n        });\n      }\n    };\n\n    this.handleInput = event => {\n      const _event$target = event.target,\n            value = _event$target.value,\n            name = _event$target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.handlelogin = event => {\n      event.preventDefault();\n      const password = {\n        password: this.state.password\n      };\n      API.checkPassword(password).then(response => {\n        if (response.data === \"incorrect password\") {\n          this.setState({\n            password: \"\",\n            login: \"incorrect password\"\n          });\n        } else if (response.data === \"correct password\") {\n          this.setState({\n            isOpen: false\n          });\n        }\n      });\n    };\n\n    this.sendMessage = event => {\n      event.preventDefault();\n      const _this$state = this.state,\n            newMessage = _this$state.newMessage,\n            currentUser = _this$state.currentUser,\n            currentRoom = _this$state.currentRoom;\n      if (newMessage.trim() === \"\") return;\n      currentUser.sendMessage({\n        text: newMessage,\n        roomId: \"\".concat(currentRoom.id)\n      });\n      this.setState({\n        newMessage: \"\"\n      });\n    };\n\n    this.connectToRoom = id => {\n      const currentUser = this.state.currentUser;\n      return currentUser.subscribeToRoom({\n        roomId: \"\".concat(id),\n        messageLimit: 100,\n        hooks: {\n          onMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          }\n        }\n      }).then(currentRoom => {\n        this.setState({\n          currentRoom\n        });\n      });\n    };\n\n    this.joinRoom = id => {\n      this.setState({\n        messages: []\n      }, () => this.connectToRoom(id));\n    };\n  }\n\n  componentDidMount() {\n    const userId = \"support\";\n    axios.post(\"/users\", {\n      userId\n    }).then(() => {\n      const tokenProvider = new Chatkit.TokenProvider({\n        url: \"http://localhost:3000/authenticate\"\n      });\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: \"v1:us1:f1cbf8e9-3cc8-4abe-8013-6f535f84c39f\",\n        userId,\n        tokenProvider\n      });\n      return chatManager.connect({\n        onAddedToRoom: room => {\n          this.setState({\n            rooms: [...this.state.rooms, room]\n          });\n        }\n      }).then(currentUser => {\n        this.setState({\n          currentUser,\n          rooms: currentUser.rooms\n        }, () => {\n          if (this.state.rooms.length >= 1) {\n            this.connectToRoom(this.state.rooms[0].id);\n          }\n        });\n      });\n    }).catch(console.error);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          newMessage = _this$state2.newMessage,\n          rooms = _this$state2.rooms,\n          currentRoom = _this$state2.currentRoom,\n          messages = _this$state2.messages,\n          currentUser = _this$state2.currentUser;\n    const RoomList = rooms.map(room => {\n      const isActive = currentRoom && currentRoom.id === room.id ? \"active\" : \"\";\n      return React.createElement(\"li\", {\n        key: room.id,\n        onClick: () => this.joinRoom(room.id),\n        className: \"\".concat(isActive, \" room\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, room.name);\n    });\n    const ChatSession = messages.map((message, index) => {\n      const user = message.senderId === currentUser.id ? \"support\" : \"user\";\n      return React.createElement(\"span\", {\n        key: index,\n        className: \"\".concat(user, \" message\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, message.text);\n    });\n    return React.createElement(\"div\", {\n      className: \"support-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(LoginModal, {\n      handleModal: this.handleModal,\n      isOpen: this.state.isOpen,\n      handleChange: this.handleChange,\n      handlelogin: this.handlelogin,\n      password: this.state.password,\n      login: this.state.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"aside\", {\n      className: \"support-sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Rooms\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, RoomList)), React.createElement(\"section\", {\n      className: \"support-session\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"current-chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, currentRoom ? currentRoom.name : \"Chat\")), React.createElement(\"div\", {\n      className: \"chat-session\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, ChatSession), React.createElement(\"form\", {\n      onSubmit: this.sendMessage,\n      className: \"message-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"message-input\",\n      autoFocus: true,\n      placeholder: \"Compose your message and hit ENTER to send\",\n      onChange: this.handleInput,\n      value: newMessage,\n      name: \"newMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onSubmit: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default Support;","map":{"version":3,"sources":["/Users/mitchellwaite/Personal-Website/mitchtwaite/Portafolio/client/src/pages/Support/Support.js"],"names":["React","Component","axios","Chatkit","LoginModal","API","Support","state","currentUser","currentRoom","newMessage","messages","rooms","password","isOpen","login","handleModal","setState","handleInput","event","target","value","name","handleChange","handlelogin","preventDefault","checkPassword","then","response","data","sendMessage","trim","text","roomId","id","connectToRoom","subscribeToRoom","messageLimit","hooks","onMessage","message","joinRoom","componentDidMount","userId","post","tokenProvider","TokenProvider","url","chatManager","ChatManager","instanceLocator","connect","onAddedToRoom","room","length","catch","console","error","render","RoomList","map","isActive","ChatSession","index","user","senderId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,OAAO,eAAP;;AAEE,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAE5BM,KAF4B,GAEpB;AACNC,MAAAA,WAAW,EAAE,IADP;AAENC,MAAAA,WAAW,EAAE,IAFP;AAGNC,MAAAA,UAAU,EAAE,EAHN;AAINC,MAAAA,QAAQ,EAAE,EAJJ;AAKNC,MAAAA,KAAK,EAAE,EALD;AAMNC,MAAAA,QAAQ,EAAE,EANJ;AAONC,MAAAA,MAAM,EAAE,IAPF;AAQNC,MAAAA,KAAK,EAAE;AARD,KAFoB;;AAAA,SAa5BC,WAb4B,GAad,MAAM;AAClB,UAAG,CAAC,KAAKT,KAAL,CAAWO,MAAf,EAAuB;AACnB,aAAKG,QAAL,CAAc;AACVH,UAAAA,MAAM,EAAE;AADE,SAAd;AAGJ,OAJA,MAIM,IAAI,KAAKP,KAAL,CAAWO,MAAf,EAAuB;AAC1B,aAAKG,QAAL,CAAc;AACTH,UAAAA,MAAM,EAAE;AADC,SAAd;AAGH;AACD,KAvB2B;;AAAA,SAyB5BI,WAzB4B,GAyBbC,KAAD,IAAW;AAAA,4BACCA,KAAK,CAACC,MADP;AAAA,YACfC,KADe,iBACfA,KADe;AAAA,YACRC,IADQ,iBACRA,IADQ;AAEvB,WAAKL,QAAL,CAAc;AACZ,SAACK,IAAD,GAAQD;AADI,OAAd;AAGD,KA9B2B;;AAAA,SAgC5BE,YAhC4B,GAgCZD,IAAD,IAAWH,KAAD,IAAW;AAClC,WAAKF,QAAL,CAAc;AACV,SAACK,IAAD,GAAQH,KAAK,CAACC,MAAN,CAAaC;AADX,OAAd;AAGD,KApC2B;;AAAA,SAsC5BG,WAtC4B,GAsCbL,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACM,cAAN;AACA,YAAMZ,QAAQ,GAAG;AACfA,QAAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWM;AADN,OAAjB;AAGAR,MAAAA,GAAG,CAACqB,aAAJ,CAAkBb,QAAlB,EACGc,IADH,CACQC,QAAQ,IAAI;AAChB,YAAIA,QAAQ,CAACC,IAAT,KAAkB,oBAAtB,EAA4C;AAC1C,eAAKZ,QAAL,CAAc;AACZJ,YAAAA,QAAQ,EAAE,EADE;AAEZE,YAAAA,KAAK,EAAE;AAFK,WAAd;AAID,SALD,MAKO,IAAIa,QAAQ,CAACC,IAAT,KAAkB,kBAAtB,EAA0C;AAC/C,eAAKZ,QAAL,CAAc;AACZH,YAAAA,MAAM,EAAE;AADI,WAAd;AAGD;AACF,OAZH;AAaD,KAxD2B;;AAAA,SA0D5BgB,WA1D4B,GA0DbX,KAAD,IAAW;AACrBA,MAAAA,KAAK,CAACM,cAAN;AADqB,0BAE4B,KAAKlB,KAFjC;AAAA,YAEbG,UAFa,eAEbA,UAFa;AAAA,YAEDF,WAFC,eAEDA,WAFC;AAAA,YAEYC,WAFZ,eAEYA,WAFZ;AAIrB,UAAIC,UAAU,CAACqB,IAAX,OAAsB,EAA1B,EAA8B;AAE9BvB,MAAAA,WAAW,CAACsB,WAAZ,CAAwB;AACtBE,QAAAA,IAAI,EAAEtB,UADgB;AAEtBuB,QAAAA,MAAM,YAAKxB,WAAW,CAACyB,EAAjB;AAFgB,OAAxB;AAKA,WAAKjB,QAAL,CAAc;AACZP,QAAAA,UAAU,EAAE;AADA,OAAd;AAGH,KAxE2B;;AAAA,SA0E5ByB,aA1E4B,GA0EXD,EAAD,IAAQ;AAAA,YACZ1B,WADY,GACI,KAAKD,KADT,CACZC,WADY;AAEpB,aAAOA,WAAW,CACf4B,eADI,CACY;AACfH,QAAAA,MAAM,YAAKC,EAAL,CADS;AAEfG,QAAAA,YAAY,EAAE,GAFC;AAGfC,QAAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAEC,OAAO,IAAI;AACpB,iBAAKvB,QAAL,CAAc;AACZN,cAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKJ,KAAL,CAAWI,QAAf,EAAyB6B,OAAzB;AADE,aAAd;AAGD;AALI;AAHQ,OADZ,EAYJb,IAZI,CAYClB,WAAW,IAAI;AACnB,aAAKQ,QAAL,CAAc;AACZR,UAAAA;AADY,SAAd;AAGD,OAhBI,CAAP;AAiBH,KA7F2B;;AAAA,SAyI5BgC,QAzI4B,GAyIjBP,EAAE,IAAI;AACf,WAAKjB,QAAL,CACE;AACEN,QAAAA,QAAQ,EAAE;AADZ,OADF,EAIE,MAAM,KAAKwB,aAAL,CAAmBD,EAAnB,CAJR;AAMD,KAhJ2B;AAAA;;AAgG5BQ,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,MAAM,GAAG,SAAf;AAEAzC,IAAAA,KAAK,CACF0C,IADH,CACQ,QADR,EACkB;AAAED,MAAAA;AAAF,KADlB,EAEGhB,IAFH,CAEQ,MAAM;AACV,YAAMkB,aAAa,GAAG,IAAI1C,OAAO,CAAC2C,aAAZ,CAA0B;AAC9CC,QAAAA,GAAG,EAAE;AADyC,OAA1B,CAAtB;AAIA,YAAMC,WAAW,GAAG,IAAI7C,OAAO,CAAC8C,WAAZ,CAAwB;AAC1CC,QAAAA,eAAe,EAAE,6CADyB;AAE1CP,QAAAA,MAF0C;AAG1CE,QAAAA;AAH0C,OAAxB,CAApB;AAMA,aAAOG,WAAW,CACfG,OADI,CACI;AACPC,QAAAA,aAAa,EAAEC,IAAI,IAAI;AACrB,eAAKpC,QAAL,CAAc;AACZL,YAAAA,KAAK,EAAE,CAAC,GAAG,KAAKL,KAAL,CAAWK,KAAf,EAAsByC,IAAtB;AADK,WAAd;AAGD;AALM,OADJ,EAQJ1B,IARI,CAQCnB,WAAW,IAAI;AACnB,aAAKS,QAAL,CACE;AACET,UAAAA,WADF;AAEEI,UAAAA,KAAK,EAAEJ,WAAW,CAACI;AAFrB,SADF,EAKE,MAAM;AACJ,cAAI,KAAKL,KAAL,CAAWK,KAAX,CAAiB0C,MAAjB,IAA2B,CAA/B,EAAkC;AAChC,iBAAKnB,aAAL,CAAmB,KAAK5B,KAAL,CAAWK,KAAX,CAAiB,CAAjB,EAAoBsB,EAAvC;AACD;AACF,SATH;AAWD,OApBI,CAAP;AAqBD,KAlCH,EAmCGqB,KAnCH,CAmCSC,OAAO,CAACC,KAnCjB;AAoCD;;AAWDC,EAAAA,MAAM,GAAG;AAAA,yBAOH,KAAKnD,KAPF;AAAA,UAELG,UAFK,gBAELA,UAFK;AAAA,UAGLE,KAHK,gBAGLA,KAHK;AAAA,UAILH,WAJK,gBAILA,WAJK;AAAA,UAKLE,QALK,gBAKLA,QALK;AAAA,UAMLH,WANK,gBAMLA,WANK;AASP,UAAMmD,QAAQ,GAAG/C,KAAK,CAACgD,GAAN,CAAUP,IAAI,IAAI;AACjC,YAAMQ,QAAQ,GACZpD,WAAW,IAAIA,WAAW,CAACyB,EAAZ,KAAmBmB,IAAI,CAACnB,EAAvC,GAA4C,QAA5C,GAAuD,EADzD;AAEA,aACE;AACE,QAAA,GAAG,EAAEmB,IAAI,CAACnB,EADZ;AAEE,QAAA,OAAO,EAAE,MAAM,KAAKO,QAAL,CAAcY,IAAI,CAACnB,EAAnB,CAFjB;AAGE,QAAA,SAAS,YAAK2B,QAAL,UAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKGR,IAAI,CAAC/B,IALR,CADF;AASD,KAZgB,CAAjB;AAcA,UAAMwC,WAAW,GAAGnD,QAAQ,CAACiD,GAAT,CAAa,CAACpB,OAAD,EAAUuB,KAAV,KAAoB;AACnD,YAAMC,IAAI,GAAGxB,OAAO,CAACyB,QAAR,KAAqBzD,WAAW,CAAC0B,EAAjC,GAAsC,SAAtC,GAAkD,MAA/D;AACA,aACE;AAAM,QAAA,GAAG,EAAE6B,KAAX;AAAkB,QAAA,SAAS,YAAKC,IAAL,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGxB,OAAO,CAACR,IADX,CADF;AAKD,KAPmB,CAApB;AASA,WACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AACQ,MAAA,WAAW,EAAE,KAAKhB,WAD1B;AAEQ,MAAA,MAAM,EAAE,KAAKT,KAAL,CAAWO,MAF3B;AAGQ,MAAA,YAAY,EAAE,KAAKS,YAH3B;AAIQ,MAAA,WAAW,EAAE,KAAKC,WAJ1B;AAKQ,MAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWM,QAL7B;AAMQ,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWQ,KAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EASE;AAAO,MAAA,SAAS,EAAC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK4C,QAAL,CAFF,CATF,EAaE;AAAS,MAAA,SAAS,EAAC,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,SAAS,EAAC,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKlD,WAAW,GAAGA,WAAW,CAACa,IAAf,GAAsB,MAAtC,CADF,CADF,EAIE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+BwC,WAA/B,CAJF,EAKE;AAAM,MAAA,QAAQ,EAAE,KAAKhC,WAArB;AAAkC,MAAA,SAAS,EAAC,cAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAC,eADZ;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,WAAW,EAAC,4CAHd;AAIE,MAAA,QAAQ,EAAE,KAAKZ,WAJjB;AAKE,MAAA,KAAK,EAAER,UALT;AAME,MAAA,IAAI,EAAC,YANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EASE;AAAQ,MAAA,QAAQ,EAAE,KAAKoB,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,CALF,CAbF,CADF;AAiCD;;AAnN2B;;AAsN9B,eAAexB,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Chatkit from \"@pusher/chatkit-client\";\nimport LoginModal from \"../../components/Modals/LoginModal\";\nimport API from \"../../utils/API\";\nimport \"./Support.css\";\n\n  class Support extends Component {\n\n      state = {\n        currentUser: null,\n        currentRoom: null,\n        newMessage: \"\",\n        messages: [],\n        rooms: [],\n        password: \"\",\n        isOpen: true,\n        login: \"\"\n      };\n\n      handleModal = () => {\n        if(!this.state.isOpen) {\n            this.setState({\n                isOpen: true\n            });\n       } else if (this.state.isOpen) {\n           this.setState({\n                isOpen: false\n           });\n       }\n      };\n\n      handleInput = (event) => {\n        const { value, name } = event.target;\n        this.setState({\n          [name]: value\n        });\n      }\n\n      handleChange = (name) => (event) => {\n        this.setState({\n            [name]: event.target.value\n        });\n      };\n\n      handlelogin = (event) => {\n        event.preventDefault();\n        const password = {\n          password: this.state.password\n        }\n        API.checkPassword(password)\n          .then(response => {\n            if (response.data === \"incorrect password\") {\n              this.setState({\n                password: \"\",\n                login: \"incorrect password\"\n              })\n            } else if (response.data === \"correct password\") {\n              this.setState({\n                isOpen: false\n              });\n            }\n          })\n      };\n          \n      sendMessage = (event) => {\n          event.preventDefault();\n          const { newMessage, currentUser, currentRoom } = this.state;\n      \n          if (newMessage.trim() === \"\") return;\n      \n          currentUser.sendMessage({\n            text: newMessage,\n            roomId: `${currentRoom.id}`\n          });\n      \n          this.setState({\n            newMessage: \"\"\n          });\n      }\n          \n      connectToRoom = (id) => {\n          const { currentUser } = this.state;\n          return currentUser\n            .subscribeToRoom({\n              roomId: `${id}`,\n              messageLimit: 100,\n              hooks: {\n                onMessage: message => {\n                  this.setState({\n                    messages: [...this.state.messages, message]\n                  });\n                },\n              }\n            })\n            .then(currentRoom => {\n              this.setState({\n                currentRoom\n              });\n            });\n      }\n\n\n      componentDidMount() {\n        const userId = \"support\";\n\n        axios\n          .post(\"/users\", { userId })\n          .then(() => {\n            const tokenProvider = new Chatkit.TokenProvider({\n              url: \"http://localhost:3000/authenticate\"\n            });\n\n            const chatManager = new Chatkit.ChatManager({\n              instanceLocator: \"v1:us1:f1cbf8e9-3cc8-4abe-8013-6f535f84c39f\",\n              userId,\n              tokenProvider\n            });\n\n            return chatManager\n              .connect({\n                onAddedToRoom: room => {\n                  this.setState({\n                    rooms: [...this.state.rooms, room]\n                  });\n                }\n              })\n              .then(currentUser => {\n                this.setState(\n                  {\n                    currentUser,\n                    rooms: currentUser.rooms\n                  },\n                  () => {\n                    if (this.state.rooms.length >= 1) {\n                      this.connectToRoom(this.state.rooms[0].id);\n                    }\n                  }\n                );\n              });\n          })\n          .catch(console.error);\n      }\n\n      joinRoom = id => {\n        this.setState(\n          {\n            messages: []\n          },\n          () => this.connectToRoom(id)\n        );\n      };\n\n      render() {\n        const {\n          newMessage,\n          rooms,\n          currentRoom,\n          messages,\n          currentUser\n        } = this.state;\n\n        const RoomList = rooms.map(room => {\n          const isActive =\n            currentRoom && currentRoom.id === room.id ? \"active\" : \"\";\n          return (\n            <li\n              key={room.id}\n              onClick={() => this.joinRoom(room.id)}\n              className={`${isActive} room`}\n            >\n              {room.name}\n            </li>\n          );\n        });\n\n        const ChatSession = messages.map((message, index) => {\n          const user = message.senderId === currentUser.id ? \"support\" : \"user\";\n          return (\n            <span key={index} className={`${user} message`}>\n              {message.text}\n            </span>\n          );\n        });\n\n        return (\n          <div className=\"support-area\">\n            <LoginModal \n                    handleModal={this.handleModal} \n                    isOpen={this.state.isOpen}\n                    handleChange={this.handleChange}\n                    handlelogin={this.handlelogin}\n                    password={this.state.password}\n                    login={this.state.login}\n            />\n            <aside className=\"support-sidebar\">\n              <h3>Rooms</h3>\n              <ul>{RoomList}</ul>\n            </aside>\n            <section className=\"support-session\">\n              <header className=\"current-chat\">\n                <h3>{currentRoom ? currentRoom.name : \"Chat\"}</h3>\n              </header>\n              <div className=\"chat-session\">{ChatSession}</div>\n              <form onSubmit={this.sendMessage} className=\"message-form\">\n                <input\n                  className=\"message-input\"\n                  autoFocus\n                  placeholder=\"Compose your message and hit ENTER to send\"\n                  onChange={this.handleInput}\n                  value={newMessage}\n                  name=\"newMessage\"\n                />\n                <button onSubmit={this.sendMessage}>Submit</button>\n              </form>\n            </section>\n          </div>\n        );\n      }\n    }\n\n    export default Support;"]},"metadata":{},"sourceType":"module"}